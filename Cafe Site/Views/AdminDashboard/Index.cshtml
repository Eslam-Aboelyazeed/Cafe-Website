@model DashboardViewModel

@{
    ViewData["Title"] = "Index";
    Layout = "~/Views/Shared/_CustomLayout.cshtml";
}

<header id="fh5co-header" class="fh5co-cover js-fullheight" role="banner" style="background-image: url(/images/hero_1.jpeg);" data-stellar-background-ratio="0.5">
    <div class="overlay"></div>
    <div class="container">
        <div class="row">
            <div class="col-md-12 text-center">
                <div class="display-t js-fullheight">
                    <div class="display-tc js-fullheight animate-box" data-animate-effect="fadeIn">
                        <h1>Admin Dashboard</h1>
                    </div>
                </div>
            </div>
        </div>
    </div>
</header>

<div id="fh5co-featured-menu" class="fh5co-section" style="padding:0px; padding-top:85px">
    <div class="container text-center" style="height:50px">
        <div class="row" style="height:50px">
            <div class="col-md-12 fh5co-heading animate-box" style="margin-bottom:0px">
                <h2>Products List</h2>
            </div>
        </div>
    </div>
</div>

<div class="container-fluid mt-5"> 
    <div class="row">
        <div class="col-md-12 text-center" id="ProFilters" style="margin-bottom: 5px;">
            <button class="filter-button mt-3" data-filter="All" id="All">All</button>
            <button class="filter-button mt-3" data-filter="All Products" id="All Products">All Products</button>
            <button class="filter-button mt-3" data-filter="Hot Drinks" id="Hot Drinks">Hot Drinks</button>
            <button class="filter-button mt-3" data-filter="Cold Drinks" id="Cold Drinks">Cold Drinks</button>
            <button class="filter-button mt-3" data-filter="Deserts" id="Deserts">Deserts</button>
            <button class="filter-button mt-3" data-filter="Pastry" id="Pastry">Pastry</button>
            <button class="filter-button mt-3" data-filter="All Additions" id="All Additions">All Additions</button>
            <button class="filter-button mt-3" data-filter="Add-Hot Drinks" id="Add-Hot Drinks">Hot Drinks Additions</button>
            <button class="filter-button mt-3" data-filter="Add-Cold Drinks" id="Add-Cold Drinks">Cold Drinks Additions</button>
            <button class="filter-button mt-3" data-filter="Add-Deserts" id="Add-Deserts">Deserts Additions</button>
            <button class="filter-button mt-3" data-filter="Add-Pastry" id="Add-Pastry">Pastry Additions</button>
        </div>
    </div>
</div>

<div class="my-4 mx-2">
    <a asp-action="Add" style="color: #BE9C79" onmouseover="this.style.color='red'; this.style.textDecoration='underline';" onmouseout="this.style.color='#BE9C79'; this.style.textDecoration='none';"><img src="~/images/plus.png" alt="Plus" style="height:25px;padding-bottom:5px;padding-right:5px; font-weight: bold;" />Add Product</a>
</div>

<div id="parView">
    <partial name="_DashboardProductsPartial" />
</div>

<div class="pagination-container col-md-12" id="container" style="display:grid; justify-content:center; align-items:center;">
    @if (Model.TotalPages > 1)
    {
        <ul class="pagination">
            @if (Model.CurrentPage > 1)
            {
                <li><a href="#" class="pagination-link" data-page="@(Model.CurrentPage - 1)">Previous</a></li>
            }

            @for (int i = 1; i <= Model.TotalPages; i++)
            {
                if (i == Model.CurrentPage)
                {
                    <li class="active"><span>@i</span></li>
                }
                else
                {
                    <li><a href="#" class="pagination-link" data-page="@i">@i</a></li>
                }
            }

            @if (Model.CurrentPage < Model.TotalPages)
            {
                <li><a href="#" class="pagination-link" data-page="@(Model.CurrentPage + 1)">Next</a></li>
            }
        </ul>
    }
</div>

<!--Start Modal Section-->

<div class="modal fade" id="m1" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabel">Delete Confirmation</h5>
                <button type="button" class="close" data-bs-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body text-dark" id="ModalText"></div>
            <div class="modal-footer" id="mf">
            </div>
        </div>
    </div>
</div>
<!-- End Modal Section-->

<!-- Start Modal 2 Section-->

<div class="modal fade" id="m2" tabindex="-1" role="dialog" aria-labelledby="exampleModalCenterTitle" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLongTitle">Modal title</h5>
                <button type="button" class="close" data-bs-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body text-dark" id="ModalText2">
            </div>
            <div class="modal-footer" id="mf2">
            </div>
        </div>
    </div>
</div>

<!-- End Modal 2 Section-->

@section scripts{
    <script>

        function loaded(){
            let adminnbl = document.getElementById('adminlink');

            adminnbl.className = "active";
        }

        loaded();

        function ShowModal(id) {
            let modal = new bootstrap.Modal(document.getElementById('m1'));

            let b1 = document.createElement("a");
            let b2 = document.createElement("a");

            b1.classList = "btn btn-secondary";

            b2.classList = "btn btn-primary";

            b1.innerText = "No";
            b2.innerText = "Yes";

            b1.setAttribute("data-bs-dismiss", "modal");
            b1.style.color = "white";
            b2.style.color = "white";
            b2.setAttribute("data-bs-dismiss", "modal");
            b2.onclick = DeleteProduct.bind(this, id);

            let mf = document.getElementById('mf');

            let mt = document.getElementById('ModalText');

            mf.innerHTML = "";
            mt.innerText = "Are You Sure You Want To Delete This Product?";

            mf.append(b1, b2);

            modal.show();
        }

        function ShowModalSize(id) {
            let modal = new bootstrap.Modal(document.getElementById('m1'));

            let mf = document.getElementById('mf');

            let mt = document.getElementById('ModalText');

            let sp = document.getElementById(`S${id}`);
            let lp = document.getElementById(`L${id}`);
             
            mf.innerHTML = "";

            let b1 = document.createElement("a");
            b1.classList = "btn btn-secondary";
            b1.innerText = "Cancel";
            b1.setAttribute("data-bs-dismiss", "modal");
            b1.style.color = "white";

            mt.innerText = "Choose The Size You Want to Delete";

            if (sp.innerText != '-' && lp.innerText != '-') {
                let b2 = document.createElement("a");
                b2.classList = "btn btn-primary";
                b2.innerText = "Delete Size Small";
                b2.onclick = DeleteProductSize.bind(this, id, 'S');
                b2.setAttribute("data-bs-dismiss", "modal");
                b2.style.color = "white";


                let b3 = document.createElement("a");
                b3.classList = "btn btn-primary";
                b3.innerText = "Delete Size Large";
                b3.onclick = DeleteProductSize.bind(this, id, 'L');
                b3.setAttribute("data-bs-dismiss", "modal");
                b3.style.color = "white";

                mf.append(b1, b2, b3);
            }
            else if (sp.innerText != '-') {
                let b2 = document.createElement("a");
                b2.classList = "btn btn-primary";
                b2.innerText = "Delete Size Small";
                b2.onclick = DeleteProductSize.bind(this, id, 'S');
                b2.setAttribute("data-bs-dismiss", "modal");
                b2.style.color = "white";

                mf.append(b1, b2);
            }
            else if (lp.innerText != '-') {
                let b3 = document.createElement("a");
                b3.classList = "btn btn-primary";
                b3.innerText = "Delete Size Large";
                b3.onclick = DeleteProductSize.bind(this, id, 'L');
                b3.setAttribute("data-bs-dismiss", "modal");
                b3.style.color = "white";

                mf.append(b1, b3);
            }
            else {
                b1.innerText = "Ok";

                mt.innerText = "There are no available sizes to be deleted";
                
                mf.append(b1);
            }

            modal.show();
        }

        function DeleteProduct(id){
            $.ajax({
                url: `/AdminDashboard/Delete/${id}`,
                type: "DELETE",
                dataType: "json",
                success: function (data) {

                    if(data.success){

                        let modal = new bootstrap.Modal(document.getElementById('m2'));

                        let b1 = document.createElement("a");

                        b1.classList = "btn btn-secondary";

                        b1.innerText = "Ok";

                        b1.setAttribute("data-bs-dismiss", "modal");
                        b1.style.color = "white";

                        let mf = document.getElementById('mf2');

                        let mt = document.getElementById('ModalText2');

                        let ml = document.getElementById('exampleModalLongTitle');

                        ml.innerText = "Deleted";

                        mt.innerHTML = "<div class='text-center'><img class='h-25 w-25' src='/images/checked.png' alt='' /><p class='text-dark mt-2'>Product Deleted Sucessfully!</p></div>";

                        mf.innerHTML = "";

                        mf.append(b1);

                        modal.show();

                        document.getElementById(`${id}`).remove();
                    } else {
                        let modal = new bootstrap.Modal(document.getElementById('m2'));

                        let b1 = document.createElement("a");

                        b1.classList = "btn btn-secondary";

                        b1.innerText = "Ok";

                        b1.setAttribute("data-bs-dismiss", "modal");
                        b1.style.color = "white";

                        let mf = document.getElementById('mf2');

                        let mt = document.getElementById('ModalText2');

                        let ml = document.getElementById('exampleModalLongTitle');

                        ml.innerText = "Error";

                        mt.innerHTML = "<div class='text-center'><img class='h-25 w-25' src='/images/cancel.png' alt='' /><p class='text-dark mt-2'>Deletion Failed!</p></div>";

                        mf.innerHTML = "";

                        mf.append(b1);

                        modal.show();
                    }
                },
                error: function (error) {
                    console.log(error);
                }
            });
        }

        function DeleteProductSize(id, psize) {

            $.ajax({
                url: `/AdminDashboard/DeleteSize/${id}?size=${psize}`,
                type: "DELETE",
                dataType: "json",
                success: function (data) {

                    if(data.success){
                        let modal = new bootstrap.Modal(document.getElementById('m2'));

                        let b1 = document.createElement("a");

                        b1.classList = "btn btn-secondary";

                        b1.innerText = "Ok";

                        b1.setAttribute("data-bs-dismiss", "modal");
                        b1.style.color = "white";

                        let mf = document.getElementById('mf2');

                        let mt = document.getElementById('ModalText2');

                        let ml = document.getElementById('exampleModalLongTitle');

                        ml.innerText = "Deleted";

                        mt.innerHTML = "<div class='text-center'><img class='h-25 w-25' src='/images/checked.png' alt='' /><p class='text-dark mt-2'>Product Size Deleted Sucessfully!</p></div>";

                        mf.innerHTML = "";

                        mf.append(b1);

                        modal.show();

                        document.getElementById(`${psize}${id}`).innerText = '-';
                    }else{
                        let modal = new bootstrap.Modal(document.getElementById('m2'));

                        let b1 = document.createElement("a");

                        b1.classList = "btn btn-secondary";

                        b1.innerText = "Ok";

                        b1.setAttribute("data-bs-dismiss", "modal");
                        b1.style.color = "white";

                        let mf = document.getElementById('mf2');

                        let mt = document.getElementById('ModalText2');

                        let ml = document.getElementById('exampleModalLongTitle');

                        ml.innerText = "Error";

                        mt.innerHTML = "<div class='text-center'><img class='h-25 w-25' src='/images/cancel.png' alt='' /><p class='text-dark mt-2'>Deletion Failed!</p></div>";

                        mf.innerHTML = "";

                        mf.append(b1);

                        modal.show();

                    }
                },
                error: function (error) {
                    console.log(error);
                }
            });
        }
        var t = "All";
        $(document).ready(function () {
            var f = @Html.Raw(Json.Serialize(Model.Filter));

            document.getElementById(f).classList.add("active");
            document.getElementById(f).setAttribute("disabled", "true");

            console.log("Filter = ", f);

            MakeAjaxCall();

            $(".filter-button").on('click', function (e) {
                var value = $(this).attr('data-filter');

                $(".filter-button").removeClass("active");
                $(".filter-button").prop('disabled', false);
                $(this).addClass("active");
                $(this).prop('disabled', true);

                if (value === "All") {
                    t = "All";
                } else if (value === "All Additions" || value.includes("Add-")) {
                    t = "Addition";
                }else {
                    t = "Product";
                }
                
                e.preventDefault();
                MakeAjaxCall();
            });

            $("#container").on('click', '.pagination-link', function (e) {
                e.preventDefault(); // Prevent default navigation behavior
                MakeAjaxCall(this);
            });
        });

        function MakeAjaxCall(p) {
            var page = $(p).data("page");
            var url = '/menu/getproducts';
            var filter = $(".filter-button.active").data("filter");

            console.log("Fetching page:", page);
            console.log("URL:", url);
            console.log("Data:", { page: page });

            $.ajax({
                url: `/admindashboard/getproducts?page=${page}&pageSize=5&filter=${filter}&type=${t}`,
                type: "GET",
                beforeSend: function () {
                },
                success: function (result) {
                    console.log("AJAX Response:", result);

                    var newContent = result;

                    // Check if newContent is defined
                    if (newContent) {
                        var timestamp = new Date().getTime();

                        $("#parView").html(newContent);
                        var i = 0;

                        $(".problem").waypoint(function (direction) {

                            if (direction === 'down' && !$(this.element).hasClass('animated-fast')) {

                                i++;

                                $(this.element).addClass('item-animate');
                                setTimeout(function () {

                                    $('body .animate-box.item-animate').each(function (k) {
                                        var el = $(this);
                                        setTimeout(function () {
                                            var effect = el.data('animate-effect');
                                            if (effect === 'fadeIn') {
                                                el.addClass('fadeIn animated-fast');
                                            } else if (effect === 'fadeInLeft') {
                                                el.addClass('fadeInLeft animated-fast');
                                            } else if (effect === 'fadeInRight') {
                                                el.addClass('fadeInRight animated-fast');
                                            } else {
                                                el.addClass('fadeInUp animated-fast');
                                            }

                                            el.removeClass('item-animate');
                                        }, k * 200, 'easeInOutExpo');
                                    });

                                }, 100);

                            }

                        }, { offset: '85%' });

                        var newPage = document.getElementById("products-section").getAttribute("data-current-page");
                        var totalPages = document.getElementById("products-section").getAttribute("data-total-pages");

                        // Update pagination links
                        updatePaginationLinks(newPage, totalPages);
                    } else {
                        console.log("Error: New content is undefined");
                    }
                },


                error: function (error) {
                    console.log("Error:", error);
                    console.log("Error Response:", error.responseText);
                }
            });
        }

        function updatePaginationLinks(currentPage, totalPages) {
            // Clear existing pagination links
            $(".pagination-container").empty();

            // Create new pagination links
            var paginationContainer = $(".pagination-container");
            var paginationList = $("<ul>").addClass("pagination");

            console.log("currentPage " + currentPage);
            console.log("totalPages " + totalPages);

            // Previous button
            if (Number(currentPage) > 1) {
                var prevLink = $("<li>").append($("<a>").addClass("pagination-link").attr("href", "#").attr("data-page", Number(currentPage) - 1).text("Previous"));
                paginationList.append(prevLink);
            }

            // Numbered pages
            for (var i = 1; i <= Number(totalPages); i++) {
                var pageLink = $("<li>").append($("<a>").addClass("pagination-link").attr("href", "#").attr("data-page", i).text(i));
                if (i === Number(currentPage)) {
                    pageLink = $("<li>").addClass("active").append($("<span>").text(i));
                }
                paginationList.append(pageLink);
            }

            // Next button
            if (Number(currentPage) < Number(totalPages)) {
                var nextLink = $("<li>").append($("<a>").addClass("pagination-link").attr("href", "#").attr("data-page", Number(currentPage) + 1).text("Next"));
                paginationList.append(nextLink);
            }

            // Append pagination links to container
            paginationContainer.append(paginationList);
        }

    </script>
}